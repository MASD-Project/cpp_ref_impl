// -*- C++ -*-
//
// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

#include "masd.cpp_ref_impl.northwind/odb/employees-odb-sqlite.hxx"

#include <cassert>
#include <cstring>  // std::memcpy

#include <odb/schema-catalog-impl.hxx>

#include <odb/sqlite/traits.hxx>
#include <odb/sqlite/database.hxx>
#include <odb/sqlite/transaction.hxx>
#include <odb/sqlite/connection.hxx>
#include <odb/sqlite/statement.hxx>
#include <odb/sqlite/statement-cache.hxx>
#include <odb/sqlite/simple-object-statements.hxx>
#include <odb/sqlite/container-statements.hxx>
#include <odb/sqlite/exceptions.hxx>
#include <odb/sqlite/simple-object-result.hxx>

namespace odb
{
  // employees
  //

  struct access::object_traits_impl< ::masd::cpp_ref_impl::northwind::employees, id_sqlite >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      sqlite::connection&,
      image_type&,
      id_image_type&,
      sqlite::binding&,
      sqlite::binding&)
    {
    }
  };

  access::object_traits_impl< ::masd::cpp_ref_impl::northwind::employees, id_sqlite >::id_type
  access::object_traits_impl< ::masd::cpp_ref_impl::northwind::employees, id_sqlite >::
  id (const image_type& i)
  {
    sqlite::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      composite_value_traits< ::masd::cpp_ref_impl::northwind::employee_id, id_sqlite >::init (
        id,
        i.employee_id_value,
        db);
    }

    return id;
  }

  bool access::object_traits_impl< ::masd::cpp_ref_impl::northwind::employees, id_sqlite >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // employee_id_
    //
    if (composite_value_traits< ::masd::cpp_ref_impl::northwind::employee_id, id_sqlite >::grow (
          i.employee_id_value, t + 0UL))
      grew = true;

    // last_name_
    //
    if (t[1UL])
    {
      i.last_name_value.capacity (i.last_name_size);
      grew = true;
    }

    // first_name_
    //
    if (t[2UL])
    {
      i.first_name_value.capacity (i.first_name_size);
      grew = true;
    }

    // title_
    //
    if (t[3UL])
    {
      i.title_value.capacity (i.title_size);
      grew = true;
    }

    // title_of_courtesy_
    //
    if (t[4UL])
    {
      i.title_of_courtesy_value.capacity (i.title_of_courtesy_size);
      grew = true;
    }

    // birth_date_
    //
    if (t[5UL])
    {
      i.birth_date_value.capacity (i.birth_date_size);
      grew = true;
    }

    // hire_date_
    //
    if (t[6UL])
    {
      i.hire_date_value.capacity (i.hire_date_size);
      grew = true;
    }

    // address_
    //
    if (t[7UL])
    {
      i.address_value.capacity (i.address_size);
      grew = true;
    }

    // city_
    //
    if (t[8UL])
    {
      i.city_value.capacity (i.city_size);
      grew = true;
    }

    // region_
    //
    if (t[9UL])
    {
      i.region_value.capacity (i.region_size);
      grew = true;
    }

    // postal_code_
    //
    if (t[10UL])
    {
      i.postal_code_value.capacity (i.postal_code_size);
      grew = true;
    }

    // country_
    //
    if (t[11UL])
    {
      i.country_value.capacity (i.country_size);
      grew = true;
    }

    // home_phone_
    //
    if (t[12UL])
    {
      i.home_phone_value.capacity (i.home_phone_size);
      grew = true;
    }

    // extension_
    //
    if (t[13UL])
    {
      i.extension_value.capacity (i.extension_size);
      grew = true;
    }

    // photo_
    //
    if (t[14UL])
    {
      i.photo_value.capacity (i.photo_size);
      grew = true;
    }

    // notes_
    //
    if (t[15UL])
    {
      i.notes_value.capacity (i.notes_size);
      grew = true;
    }

    // reports_to_
    //
    if (composite_value_traits< ::masd::cpp_ref_impl::northwind::employee_id, id_sqlite >::grow (
          i.reports_to_value, t + 16UL))
      grew = true;

    return grew;
  }

  void access::object_traits_impl< ::masd::cpp_ref_impl::northwind::employees, id_sqlite >::
  bind (sqlite::bind* b,
        image_type& i,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    std::size_t n (0);

    // employee_id_
    //
    if (sk != statement_update)
    {
      composite_value_traits< ::masd::cpp_ref_impl::northwind::employee_id, id_sqlite >::bind (
        b + n, i.employee_id_value, sk);
      n += 1UL;
    }

    // last_name_
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.last_name_value.data ();
    b[n].size = &i.last_name_size;
    b[n].capacity = i.last_name_value.capacity ();
    b[n].is_null = &i.last_name_null;
    n++;

    // first_name_
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.first_name_value.data ();
    b[n].size = &i.first_name_size;
    b[n].capacity = i.first_name_value.capacity ();
    b[n].is_null = &i.first_name_null;
    n++;

    // title_
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.title_value.data ();
    b[n].size = &i.title_size;
    b[n].capacity = i.title_value.capacity ();
    b[n].is_null = &i.title_null;
    n++;

    // title_of_courtesy_
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.title_of_courtesy_value.data ();
    b[n].size = &i.title_of_courtesy_size;
    b[n].capacity = i.title_of_courtesy_value.capacity ();
    b[n].is_null = &i.title_of_courtesy_null;
    n++;

    // birth_date_
    //
    b[n].type = sqlite::image_traits<
      ::boost::gregorian::date,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.birth_date_value.data ();
    b[n].size = &i.birth_date_size;
    b[n].capacity = i.birth_date_value.capacity ();
    b[n].is_null = &i.birth_date_null;
    n++;

    // hire_date_
    //
    b[n].type = sqlite::image_traits<
      ::boost::gregorian::date,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.hire_date_value.data ();
    b[n].size = &i.hire_date_size;
    b[n].capacity = i.hire_date_value.capacity ();
    b[n].is_null = &i.hire_date_null;
    n++;

    // address_
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.address_value.data ();
    b[n].size = &i.address_size;
    b[n].capacity = i.address_value.capacity ();
    b[n].is_null = &i.address_null;
    n++;

    // city_
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.city_value.data ();
    b[n].size = &i.city_size;
    b[n].capacity = i.city_value.capacity ();
    b[n].is_null = &i.city_null;
    n++;

    // region_
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.region_value.data ();
    b[n].size = &i.region_size;
    b[n].capacity = i.region_value.capacity ();
    b[n].is_null = &i.region_null;
    n++;

    // postal_code_
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.postal_code_value.data ();
    b[n].size = &i.postal_code_size;
    b[n].capacity = i.postal_code_value.capacity ();
    b[n].is_null = &i.postal_code_null;
    n++;

    // country_
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.country_value.data ();
    b[n].size = &i.country_size;
    b[n].capacity = i.country_value.capacity ();
    b[n].is_null = &i.country_null;
    n++;

    // home_phone_
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.home_phone_value.data ();
    b[n].size = &i.home_phone_size;
    b[n].capacity = i.home_phone_value.capacity ();
    b[n].is_null = &i.home_phone_null;
    n++;

    // extension_
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.extension_value.data ();
    b[n].size = &i.extension_size;
    b[n].capacity = i.extension_value.capacity ();
    b[n].is_null = &i.extension_null;
    n++;

    // photo_
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.photo_value.data ();
    b[n].size = &i.photo_size;
    b[n].capacity = i.photo_value.capacity ();
    b[n].is_null = &i.photo_null;
    n++;

    // notes_
    //
    b[n].type = sqlite::image_traits<
      ::std::string,
      sqlite::id_text>::bind_value;
    b[n].buffer = i.notes_value.data ();
    b[n].size = &i.notes_size;
    b[n].capacity = i.notes_value.capacity ();
    b[n].is_null = &i.notes_null;
    n++;

    // reports_to_
    //
    composite_value_traits< ::masd::cpp_ref_impl::northwind::employee_id, id_sqlite >::bind (
      b + n, i.reports_to_value, sk);
    n += 1UL;
  }

  void access::object_traits_impl< ::masd::cpp_ref_impl::northwind::employees, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    sqlite::statement_kind sk (sqlite::statement_select);
    composite_value_traits< ::masd::cpp_ref_impl::northwind::employee_id, id_sqlite >::bind (
      b + n, i.id_value, sk);
  }

  bool access::object_traits_impl< ::masd::cpp_ref_impl::northwind::employees, id_sqlite >::
  init (image_type& i,
        const object_type& o,
        sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    bool grew (false);

    // employee_id_
    //
    if (sk == statement_insert)
    {
      ::masd::cpp_ref_impl::northwind::employee_id const& v =
        o.employee_id ();

      composite_value_traits< ::masd::cpp_ref_impl::northwind::employee_id, id_sqlite >::init (
        i.employee_id_value,
        v,
        sk);
    }

    // last_name_
    //
    {
      ::std::string const& v =
        o.last_name ();

      bool is_null (false);
      std::size_t cap (i.last_name_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.last_name_value,
        i.last_name_size,
        is_null,
        v);
      i.last_name_null = is_null;
      grew = grew || (cap != i.last_name_value.capacity ());
    }

    // first_name_
    //
    {
      ::std::string const& v =
        o.first_name ();

      bool is_null (false);
      std::size_t cap (i.first_name_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.first_name_value,
        i.first_name_size,
        is_null,
        v);
      i.first_name_null = is_null;
      grew = grew || (cap != i.first_name_value.capacity ());
    }

    // title_
    //
    {
      ::std::string const& v =
        o.title ();

      bool is_null (true);
      std::size_t cap (i.title_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.title_value,
        i.title_size,
        is_null,
        v);
      i.title_null = is_null;
      grew = grew || (cap != i.title_value.capacity ());
    }

    // title_of_courtesy_
    //
    {
      ::std::string const& v =
        o.title_of_courtesy ();

      bool is_null (true);
      std::size_t cap (i.title_of_courtesy_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.title_of_courtesy_value,
        i.title_of_courtesy_size,
        is_null,
        v);
      i.title_of_courtesy_null = is_null;
      grew = grew || (cap != i.title_of_courtesy_value.capacity ());
    }

    // birth_date_
    //
    {
      ::boost::gregorian::date const& v =
        o.birth_date ();

      bool is_null (true);
      std::size_t cap (i.birth_date_value.capacity ());
      sqlite::value_traits<
          ::boost::gregorian::date,
          sqlite::id_text >::set_image (
        i.birth_date_value,
        i.birth_date_size,
        is_null,
        v);
      i.birth_date_null = is_null;
      grew = grew || (cap != i.birth_date_value.capacity ());
    }

    // hire_date_
    //
    {
      ::boost::gregorian::date const& v =
        o.hire_date ();

      bool is_null (true);
      std::size_t cap (i.hire_date_value.capacity ());
      sqlite::value_traits<
          ::boost::gregorian::date,
          sqlite::id_text >::set_image (
        i.hire_date_value,
        i.hire_date_size,
        is_null,
        v);
      i.hire_date_null = is_null;
      grew = grew || (cap != i.hire_date_value.capacity ());
    }

    // address_
    //
    {
      ::std::string const& v =
        o.address ();

      bool is_null (true);
      std::size_t cap (i.address_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.address_value,
        i.address_size,
        is_null,
        v);
      i.address_null = is_null;
      grew = grew || (cap != i.address_value.capacity ());
    }

    // city_
    //
    {
      ::std::string const& v =
        o.city ();

      bool is_null (true);
      std::size_t cap (i.city_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.city_value,
        i.city_size,
        is_null,
        v);
      i.city_null = is_null;
      grew = grew || (cap != i.city_value.capacity ());
    }

    // region_
    //
    {
      ::std::string const& v =
        o.region ();

      bool is_null (true);
      std::size_t cap (i.region_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.region_value,
        i.region_size,
        is_null,
        v);
      i.region_null = is_null;
      grew = grew || (cap != i.region_value.capacity ());
    }

    // postal_code_
    //
    {
      ::std::string const& v =
        o.postal_code ();

      bool is_null (true);
      std::size_t cap (i.postal_code_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.postal_code_value,
        i.postal_code_size,
        is_null,
        v);
      i.postal_code_null = is_null;
      grew = grew || (cap != i.postal_code_value.capacity ());
    }

    // country_
    //
    {
      ::std::string const& v =
        o.country ();

      bool is_null (true);
      std::size_t cap (i.country_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.country_value,
        i.country_size,
        is_null,
        v);
      i.country_null = is_null;
      grew = grew || (cap != i.country_value.capacity ());
    }

    // home_phone_
    //
    {
      ::std::string const& v =
        o.home_phone ();

      bool is_null (true);
      std::size_t cap (i.home_phone_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.home_phone_value,
        i.home_phone_size,
        is_null,
        v);
      i.home_phone_null = is_null;
      grew = grew || (cap != i.home_phone_value.capacity ());
    }

    // extension_
    //
    {
      ::std::string const& v =
        o.extension ();

      bool is_null (true);
      std::size_t cap (i.extension_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.extension_value,
        i.extension_size,
        is_null,
        v);
      i.extension_null = is_null;
      grew = grew || (cap != i.extension_value.capacity ());
    }

    // photo_
    //
    {
      ::std::string const& v =
        o.photo ();

      bool is_null (true);
      std::size_t cap (i.photo_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.photo_value,
        i.photo_size,
        is_null,
        v);
      i.photo_null = is_null;
      grew = grew || (cap != i.photo_value.capacity ());
    }

    // notes_
    //
    {
      ::std::string const& v =
        o.notes ();

      bool is_null (true);
      std::size_t cap (i.notes_value.capacity ());
      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_image (
        i.notes_value,
        i.notes_size,
        is_null,
        v);
      i.notes_null = is_null;
      grew = grew || (cap != i.notes_value.capacity ());
    }

    // reports_to_
    //
    {
      ::masd::cpp_ref_impl::northwind::employee_id const& v =
        o.reports_to ();

      composite_value_traits< ::masd::cpp_ref_impl::northwind::employee_id, id_sqlite >::init (
        i.reports_to_value,
        v,
        sk);
    }

    return grew;
  }

  void access::object_traits_impl< ::masd::cpp_ref_impl::northwind::employees, id_sqlite >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // employee_id_
    //
    {
      ::masd::cpp_ref_impl::northwind::employee_id& v =
        o.employee_id ();

      composite_value_traits< ::masd::cpp_ref_impl::northwind::employee_id, id_sqlite >::init (
        v,
        i.employee_id_value,
        db);
    }

    // last_name_
    //
    {
      ::std::string& v =
        o.last_name ();

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.last_name_value,
        i.last_name_size,
        i.last_name_null);
    }

    // first_name_
    //
    {
      ::std::string& v =
        o.first_name ();

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.first_name_value,
        i.first_name_size,
        i.first_name_null);
    }

    // title_
    //
    {
      ::std::string& v =
        o.title ();

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.title_value,
        i.title_size,
        i.title_null);
    }

    // title_of_courtesy_
    //
    {
      ::std::string& v =
        o.title_of_courtesy ();

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.title_of_courtesy_value,
        i.title_of_courtesy_size,
        i.title_of_courtesy_null);
    }

    // birth_date_
    //
    {
      ::boost::gregorian::date& v =
        o.birth_date ();

      sqlite::value_traits<
          ::boost::gregorian::date,
          sqlite::id_text >::set_value (
        v,
        i.birth_date_value,
        i.birth_date_size,
        i.birth_date_null);
    }

    // hire_date_
    //
    {
      ::boost::gregorian::date& v =
        o.hire_date ();

      sqlite::value_traits<
          ::boost::gregorian::date,
          sqlite::id_text >::set_value (
        v,
        i.hire_date_value,
        i.hire_date_size,
        i.hire_date_null);
    }

    // address_
    //
    {
      ::std::string& v =
        o.address ();

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.address_value,
        i.address_size,
        i.address_null);
    }

    // city_
    //
    {
      ::std::string& v =
        o.city ();

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.city_value,
        i.city_size,
        i.city_null);
    }

    // region_
    //
    {
      ::std::string& v =
        o.region ();

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.region_value,
        i.region_size,
        i.region_null);
    }

    // postal_code_
    //
    {
      ::std::string& v =
        o.postal_code ();

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.postal_code_value,
        i.postal_code_size,
        i.postal_code_null);
    }

    // country_
    //
    {
      ::std::string& v =
        o.country ();

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.country_value,
        i.country_size,
        i.country_null);
    }

    // home_phone_
    //
    {
      ::std::string& v =
        o.home_phone ();

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.home_phone_value,
        i.home_phone_size,
        i.home_phone_null);
    }

    // extension_
    //
    {
      ::std::string& v =
        o.extension ();

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.extension_value,
        i.extension_size,
        i.extension_null);
    }

    // photo_
    //
    {
      ::std::string& v =
        o.photo ();

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.photo_value,
        i.photo_size,
        i.photo_null);
    }

    // notes_
    //
    {
      ::std::string& v =
        o.notes ();

      sqlite::value_traits<
          ::std::string,
          sqlite::id_text >::set_value (
        v,
        i.notes_value,
        i.notes_size,
        i.notes_null);
    }

    // reports_to_
    //
    {
      ::masd::cpp_ref_impl::northwind::employee_id& v =
        o.reports_to ();

      composite_value_traits< ::masd::cpp_ref_impl::northwind::employee_id, id_sqlite >::init (
        v,
        i.reports_to_value,
        db);
    }
  }

  void access::object_traits_impl< ::masd::cpp_ref_impl::northwind::employees, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    sqlite::statement_kind sk (sqlite::statement_select);
    {
      composite_value_traits< ::masd::cpp_ref_impl::northwind::employee_id, id_sqlite >::init (
        i.id_value,
        id,
        sk);
    }
  }

  const char access::object_traits_impl< ::masd::cpp_ref_impl::northwind::employees, id_sqlite >::persist_statement[] =
  "INSERT INTO \"NORTHWIND\".\"EMPLOYEES\" "
  "(\"EMPLOYEE_ID\", "
  "\"LASTNAME\", "
  "\"FIRSTNAME\", "
  "\"TITLE\", "
  "\"TITLE_OF_COURTESY\", "
  "\"BIRTHDATE\", "
  "\"HIREDATE\", "
  "\"ADDRESS\", "
  "\"CITY\", "
  "\"REGION\", "
  "\"POSTAL_CODE\", "
  "\"COUNTRY\", "
  "\"HOME_PHONE\", "
  "\"EXTENSION\", "
  "\"PHOTO\", "
  "\"NOTES\", "
  "\"REPORTS_TO\") "
  "VALUES "
  "(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

  const char access::object_traits_impl< ::masd::cpp_ref_impl::northwind::employees, id_sqlite >::find_statement[] =
  "SELECT "
  "\"NORTHWIND\".\"EMPLOYEES\".\"EMPLOYEE_ID\", "
  "\"NORTHWIND\".\"EMPLOYEES\".\"LASTNAME\", "
  "\"NORTHWIND\".\"EMPLOYEES\".\"FIRSTNAME\", "
  "\"NORTHWIND\".\"EMPLOYEES\".\"TITLE\", "
  "\"NORTHWIND\".\"EMPLOYEES\".\"TITLE_OF_COURTESY\", "
  "\"NORTHWIND\".\"EMPLOYEES\".\"BIRTHDATE\", "
  "\"NORTHWIND\".\"EMPLOYEES\".\"HIREDATE\", "
  "\"NORTHWIND\".\"EMPLOYEES\".\"ADDRESS\", "
  "\"NORTHWIND\".\"EMPLOYEES\".\"CITY\", "
  "\"NORTHWIND\".\"EMPLOYEES\".\"REGION\", "
  "\"NORTHWIND\".\"EMPLOYEES\".\"POSTAL_CODE\", "
  "\"NORTHWIND\".\"EMPLOYEES\".\"COUNTRY\", "
  "\"NORTHWIND\".\"EMPLOYEES\".\"HOME_PHONE\", "
  "\"NORTHWIND\".\"EMPLOYEES\".\"EXTENSION\", "
  "\"NORTHWIND\".\"EMPLOYEES\".\"PHOTO\", "
  "\"NORTHWIND\".\"EMPLOYEES\".\"NOTES\", "
  "\"NORTHWIND\".\"EMPLOYEES\".\"REPORTS_TO\" "
  "FROM \"NORTHWIND\".\"EMPLOYEES\" "
  "WHERE \"NORTHWIND\".\"EMPLOYEES\".\"EMPLOYEE_ID\"=?";

  const char access::object_traits_impl< ::masd::cpp_ref_impl::northwind::employees, id_sqlite >::update_statement[] =
  "UPDATE \"NORTHWIND\".\"EMPLOYEES\" "
  "SET "
  "\"LASTNAME\"=?, "
  "\"FIRSTNAME\"=?, "
  "\"TITLE\"=?, "
  "\"TITLE_OF_COURTESY\"=?, "
  "\"BIRTHDATE\"=?, "
  "\"HIREDATE\"=?, "
  "\"ADDRESS\"=?, "
  "\"CITY\"=?, "
  "\"REGION\"=?, "
  "\"POSTAL_CODE\"=?, "
  "\"COUNTRY\"=?, "
  "\"HOME_PHONE\"=?, "
  "\"EXTENSION\"=?, "
  "\"PHOTO\"=?, "
  "\"NOTES\"=?, "
  "\"REPORTS_TO\"=? "
  "WHERE \"EMPLOYEE_ID\"=?";

  const char access::object_traits_impl< ::masd::cpp_ref_impl::northwind::employees, id_sqlite >::erase_statement[] =
  "DELETE FROM \"NORTHWIND\".\"EMPLOYEES\" "
  "WHERE \"EMPLOYEE_ID\"=?";

  const char access::object_traits_impl< ::masd::cpp_ref_impl::northwind::employees, id_sqlite >::query_statement[] =
  "SELECT "
  "\"NORTHWIND\".\"EMPLOYEES\".\"EMPLOYEE_ID\", "
  "\"NORTHWIND\".\"EMPLOYEES\".\"LASTNAME\", "
  "\"NORTHWIND\".\"EMPLOYEES\".\"FIRSTNAME\", "
  "\"NORTHWIND\".\"EMPLOYEES\".\"TITLE\", "
  "\"NORTHWIND\".\"EMPLOYEES\".\"TITLE_OF_COURTESY\", "
  "\"NORTHWIND\".\"EMPLOYEES\".\"BIRTHDATE\", "
  "\"NORTHWIND\".\"EMPLOYEES\".\"HIREDATE\", "
  "\"NORTHWIND\".\"EMPLOYEES\".\"ADDRESS\", "
  "\"NORTHWIND\".\"EMPLOYEES\".\"CITY\", "
  "\"NORTHWIND\".\"EMPLOYEES\".\"REGION\", "
  "\"NORTHWIND\".\"EMPLOYEES\".\"POSTAL_CODE\", "
  "\"NORTHWIND\".\"EMPLOYEES\".\"COUNTRY\", "
  "\"NORTHWIND\".\"EMPLOYEES\".\"HOME_PHONE\", "
  "\"NORTHWIND\".\"EMPLOYEES\".\"EXTENSION\", "
  "\"NORTHWIND\".\"EMPLOYEES\".\"PHOTO\", "
  "\"NORTHWIND\".\"EMPLOYEES\".\"NOTES\", "
  "\"NORTHWIND\".\"EMPLOYEES\".\"REPORTS_TO\" "
  "FROM \"NORTHWIND\".\"EMPLOYEES\"";

  const char access::object_traits_impl< ::masd::cpp_ref_impl::northwind::employees, id_sqlite >::erase_query_statement[] =
  "DELETE FROM \"NORTHWIND\".\"EMPLOYEES\"";

  const char access::object_traits_impl< ::masd::cpp_ref_impl::northwind::employees, id_sqlite >::table_name[] =
  "\"NORTHWIND\".\"EMPLOYEES\"";

  void access::object_traits_impl< ::masd::cpp_ref_impl::northwind::employees, id_sqlite >::
  persist (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              obj,
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    callback (db,
              obj,
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::masd::cpp_ref_impl::northwind::employees, id_sqlite >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace sqlite;
    using sqlite::update_statement;

    callback (db, obj, callback_event::pre_update);

    sqlite::transaction& tr (sqlite::transaction::current ());
    sqlite::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& idi (sts.id_image ());
    init (idi, id (obj));

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::masd::cpp_ref_impl::northwind::employees, id_sqlite >::
  erase (database& db, const id_type& id)
  {
    using namespace sqlite;

    ODB_POTENTIALLY_UNUSED (db);

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::masd::cpp_ref_impl::northwind::employees, id_sqlite >::pointer_type
  access::object_traits_impl< ::masd::cpp_ref_impl::northwind::employees, id_sqlite >::
  find (database& db, const id_type& id)
  {
    using namespace sqlite;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::masd::cpp_ref_impl::northwind::employees, id_sqlite >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);
    assert (l.locked ()) /* Must be a top-level call. */;

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::masd::cpp_ref_impl::northwind::employees, id_sqlite >::
  reload (database& db, object_type& obj)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);
    assert (l.locked ()) /* Must be a top-level call. */;

    const id_type& id (object_traits_impl::id (obj));
    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::masd::cpp_ref_impl::northwind::employees, id_sqlite >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace sqlite;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::masd::cpp_ref_impl::northwind::employees, id_sqlite >::object_type >
  access::object_traits_impl< ::masd::cpp_ref_impl::northwind::employees, id_sqlite >::
  query (database&, const query_base_type& q)
  {
    using namespace sqlite;
    using odb::details::shared;
    using odb::details::shared_ptr;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        conn,
        text,
        false,
        true,
        q.parameters_binding (),
        imb));

    st->execute ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) sqlite::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::masd::cpp_ref_impl::northwind::employees, id_sqlite >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace sqlite;

    sqlite::connection& conn (
      sqlite::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      text,
      q.parameters_binding ());

    return st.execute ();
  }
}

namespace odb
{
  static bool
  create_schema (database& db, unsigned short pass, bool drop)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (pass);
    ODB_POTENTIALLY_UNUSED (drop);

    if (drop)
    {
      switch (pass)
      {
        case 1:
        {
          return true;
        }
        case 2:
        {
          db.execute ("DROP TABLE IF EXISTS \"NORTHWIND\".\"EMPLOYEES\"");
          return false;
        }
      }
    }
    else
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("CREATE TABLE \"NORTHWIND\".\"EMPLOYEES\" (\n"
                      "  \"EMPLOYEE_ID\" INTEGER NOT NULL PRIMARY KEY,\n"
                      "  \"LASTNAME\" TEXT NOT NULL,\n"
                      "  \"FIRSTNAME\" TEXT NOT NULL,\n"
                      "  \"TITLE\" TEXT NULL,\n"
                      "  \"TITLE_OF_COURTESY\" TEXT NULL,\n"
                      "  \"BIRTHDATE\" TEXT NULL,\n"
                      "  \"HIREDATE\" TEXT NULL,\n"
                      "  \"ADDRESS\" TEXT NULL,\n"
                      "  \"CITY\" TEXT NULL,\n"
                      "  \"REGION\" TEXT NULL,\n"
                      "  \"POSTAL_CODE\" TEXT NULL,\n"
                      "  \"COUNTRY\" TEXT NULL,\n"
                      "  \"HOME_PHONE\" TEXT NULL,\n"
                      "  \"EXTENSION\" TEXT NULL,\n"
                      "  \"PHOTO\" TEXT NULL,\n"
                      "  \"NOTES\" TEXT NULL,\n"
                      "  \"REPORTS_TO\" INTEGER NULL)");
          return false;
        }
      }
    }

    return false;
  }

  static const schema_catalog_create_entry
  create_schema_entry_ (
    id_sqlite,
    "",
    &create_schema);
}

#include <odb/post.hxx>
