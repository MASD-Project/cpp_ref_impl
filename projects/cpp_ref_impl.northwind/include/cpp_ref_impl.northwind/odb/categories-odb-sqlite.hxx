// -*- C++ -*-
//
// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef CPP_REF_IMPL_NORTHWIND_ODB_CATEGORIES_ODB_SQLITE_HXX
#define CPP_REF_IMPL_NORTHWIND_ODB_CATEGORIES_ODB_SQLITE_HXX

// Begin prologue.
//
#include <odb/boost/version.hxx>
#if ODB_BOOST_VERSION != 2046500 // 2.5.0-b.15
#  error ODB and C++ compilers see different libodb-boost interface versions
#endif
#include <boost/shared_ptr.hpp>
#include <odb/boost/smart-ptr/pointer-traits.hxx>
#include <odb/boost/smart-ptr/wrapper-traits.hxx>
#include <odb/boost/optional/wrapper-traits.hxx>
#include <odb/boost/unordered/container-traits.hxx>
#include <odb/boost/date-time/sqlite/gregorian-traits.hxx>
#include <odb/boost/date-time/sqlite/posix-time-traits.hxx>
#include <odb/boost/multi-index/container-traits.hxx>
#include <odb/boost/uuid/sqlite/uuid-traits.hxx>
//
// End prologue.

#include <odb/version.hxx>

#if (ODB_VERSION != 20465UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "cpp_ref_impl.northwind/types/categories.hpp"

#include "cpp_ref_impl.northwind/odb/category_id-odb-sqlite.hxx"

#include "cpp_ref_impl.northwind/odb/categories-odb.hxx"

#include <odb/details/buffer.hxx>

#include <odb/sqlite/version.hxx>
#include <odb/sqlite/forward.hxx>
#include <odb/sqlite/binding.hxx>
#include <odb/sqlite/sqlite-types.hxx>
#include <odb/sqlite/query.hxx>

namespace odb
{
  // categories
  //
  template <typename A>
  struct query_columns< ::cpp_ref_impl::northwind::categories, id_sqlite, A >
  {
    // category_id
    //
    struct category_id_class_
    {
      category_id_class_ ()
      {
      }

      // value
      //
      typedef
      sqlite::query_column<
        sqlite::value_traits<
          int,
          sqlite::id_integer >::query_type,
        sqlite::id_integer >
      value_type_;

      static const value_type_ value;
    };

    static const category_id_class_ category_id;

    // category_name
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    category_name_type_;

    static const category_name_type_ category_name;

    // description
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    description_type_;

    static const description_type_ description;

    // picture
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    picture_type_;

    static const picture_type_ picture;
  };

  template <typename A>
  const typename query_columns< ::cpp_ref_impl::northwind::categories, id_sqlite, A >::category_id_class_::value_type_
  query_columns< ::cpp_ref_impl::northwind::categories, id_sqlite, A >::category_id_class_::
  value (A::table_name, "\"CATEGORY_ID\"", 0);

  template <typename A>
  const typename query_columns< ::cpp_ref_impl::northwind::categories, id_sqlite, A >::category_id_class_
  query_columns< ::cpp_ref_impl::northwind::categories, id_sqlite, A >::category_id;

  template <typename A>
  const typename query_columns< ::cpp_ref_impl::northwind::categories, id_sqlite, A >::category_name_type_
  query_columns< ::cpp_ref_impl::northwind::categories, id_sqlite, A >::
  category_name (A::table_name, "\"CATEGORY_NAME\"", 0);

  template <typename A>
  const typename query_columns< ::cpp_ref_impl::northwind::categories, id_sqlite, A >::description_type_
  query_columns< ::cpp_ref_impl::northwind::categories, id_sqlite, A >::
  description (A::table_name, "\"DESCRIPTION\"", 0);

  template <typename A>
  const typename query_columns< ::cpp_ref_impl::northwind::categories, id_sqlite, A >::picture_type_
  query_columns< ::cpp_ref_impl::northwind::categories, id_sqlite, A >::
  picture (A::table_name, "\"PICTURE\"", 0);

  template <typename A>
  struct pointer_query_columns< ::cpp_ref_impl::northwind::categories, id_sqlite, A >:
    query_columns< ::cpp_ref_impl::northwind::categories, id_sqlite, A >
  {
  };

  template <>
  class access::object_traits_impl< ::cpp_ref_impl::northwind::categories, id_sqlite >:
    public access::object_traits< ::cpp_ref_impl::northwind::categories >
  {
    public:
    struct id_image_type
    {
      composite_value_traits< ::cpp_ref_impl::northwind::category_id, id_sqlite >::image_type id_value;

      std::size_t version;
    };

    struct image_type
    {
      // category_id_
      //
      composite_value_traits< ::cpp_ref_impl::northwind::category_id, id_sqlite >::image_type category_id_value;

      // category_name_
      //
      details::buffer category_name_value;
      std::size_t category_name_size;
      bool category_name_null;

      // description_
      //
      details::buffer description_value;
      std::size_t description_size;
      bool description_null;

      // picture_
      //
      details::buffer picture_value;
      std::size_t picture_size;
      bool picture_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 4UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  // categories
  //
}

#include "cpp_ref_impl.northwind/odb/categories-odb-sqlite.ixx"

#include <odb/post.hxx>

#endif // CPP_REF_IMPL_NORTHWIND_ODB_CATEGORIES_ODB_SQLITE_HXX
