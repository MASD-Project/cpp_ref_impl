#+title: cpp_ref_impl.palette
#+options: <:nil c:nil todo:nil ^:nil d:nil date:nil author:nil
#+tags: { element(e) attribute(a) module(m) }
:PROPERTIES:
:masd.codec.reference: cpp.builtins
:masd.codec.reference: masd
:masd.codec.reference: cpp_ref_impl.profiles
:masd.variability.profile: cpp_ref_impl.profiles.base.enable_all_facets
:END:

Exercises all stereotypes that have an impact in colour,
so we can see how the entire palette looks like.

This model does not need to be code generated, though it
should remain a valid Dogen model. It must be updated with
any changes to the colour scheme. To make a change, first
update the colour.py script then run it in this model. If
it looks good, then run it against all other dogen models.

We should try to keep all elements in one screen as much
as possible, so we can evaluate how they work together.

* palette_test_two_one                                              :element:
  :PROPERTIES:
  :custom_id: O2
  :masd.codec.stereotypes: cpp_ref_impl::handcrafted::typeable
  :END:
* palette_test_two_two                                              :element:
  :PROPERTIES:
  :custom_id: O3
  :masd.codec.stereotypes: masd::cpp::header_only
  :END:
* palette_test_two_three                                            :element:
  :PROPERTIES:
  :custom_id: O4
  :masd.codec.stereotypes: masd::cpp::implementation_only
  :END:
* package                                                            :module:
  :PROPERTIES:
  :custom_id: O1
  :END:
** palette_test_two_one                                             :element:
   :PROPERTIES:
   :custom_id: O5
   :masd.codec.stereotypes: cpp_ref_impl::handcrafted::typeable
   :END:
** palette_test_two_two                                             :element:
   :PROPERTIES:
   :custom_id: O6
   :masd.codec.stereotypes: masd::cpp::header_only
   :END:
** palette_test_two_three                                           :element:
   :PROPERTIES:
   :custom_id: O7
   :masd.codec.stereotypes: masd::cpp::implementation_only
   :END:
